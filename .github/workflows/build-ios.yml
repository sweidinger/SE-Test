name: Build iOS App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

    - name: Install certificates and provisioning profiles
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        # Create temporary keychain
        security create-keychain -p "temp_password" temp.keychain
        security default-keychain -s temp.keychain
        security unlock-keychain -p "temp_password" temp.keychain
        
        # Install certificate
        echo "${{ secrets.DISTRIBUTION_CERTIFICATE }}" | base64 --decode > distribution_certificate.p12
        security import distribution_certificate.p12 -k temp.keychain -P "${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        
        # Install provisioning profile
        echo "${{ secrets.DISTRIBUTION_PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Set partition list for keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" temp.keychain
        
        # Clean up sensitive files
        rm distribution_certificate.p12 profile.mobileprovision

    - name: Show available destinations
      run: |
        cd iOS
        xcodebuild -project PasswordGeneratorApp.xcodeproj -scheme PasswordGeneratorApp -showdestinations

    - name: Build for iOS Simulator
      run: |
        cd iOS
        xcodebuild clean build \
          -project PasswordGeneratorApp.xcodeproj \
          -scheme PasswordGeneratorApp \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -configuration Debug

    - name: Archive for TestFlight (with signing)
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        cd iOS
        xcodebuild clean archive \
          -project PasswordGeneratorApp.xcodeproj \
          -scheme PasswordGeneratorApp \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -archivePath ../build/PasswordGeneratorApp.xcarchive

    - name: Archive for Device (without signing)
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE == '' }}
      run: |
        cd iOS
        xcodebuild clean archive \
          -project PasswordGeneratorApp.xcodeproj \
          -scheme PasswordGeneratorApp \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -archivePath ../build/PasswordGeneratorApp.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
      continue-on-error: true

    - name: Create TestFlight export options
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        cat > exportOptionsTestFlight.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Export IPA for TestFlight
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        cd iOS
        if [ -d "../build/PasswordGeneratorApp.xcarchive" ]; then
          xcodebuild -exportArchive \
            -archivePath ../build/PasswordGeneratorApp.xcarchive \
            -exportOptionsPlist ../exportOptionsTestFlight.plist \
            -exportPath ../build/export
        else
          echo "Archive step failed, skipping IPA creation"
        fi

    - name: Create IPA (development - fallback)
      if: ${{ secrets.DISTRIBUTION_CERTIFICATE == '' }}
      run: |
        cd iOS
        if [ -d "../build/PasswordGeneratorApp.xcarchive" ]; then
          xcodebuild -exportArchive \
            -archivePath ../build/PasswordGeneratorApp.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath ../build/export
        else
          echo "Archive step failed, skipping IPA creation"
        fi
      continue-on-error: true

    - name: Upload to TestFlight
      if: ${{ secrets.APP_STORE_CONNECT_API_KEY != '' && success() }}
      run: |
        # Create API key file
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > AuthKey.p8
        
        # Upload to TestFlight using altool
        if [ -f "build/export/PasswordGeneratorApp.ipa" ]; then
          xcrun altool --upload-app \
            --type ios \
            --file "build/export/PasswordGeneratorApp.ipa" \
            --apiKey "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
            --apiIssuer "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
            --verbose
        else
          echo "No IPA file found for TestFlight upload"
        fi
        
        # Clean up API key
        rm -f AuthKey.p8

    - name: Upload iOS Simulator Build
      uses: actions/upload-artifact@v4
      with:
        name: iOS-Simulator-App
        path: |
          /Users/runner/Library/Developer/Xcode/DerivedData/*/Build/Products/Debug-iphonesimulator/PasswordGeneratorApp.app
        retention-days: 30

    - name: Upload iOS Archive (if exists)
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: iOS-Archive
        path: |
          build/
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/export/*.ipa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
